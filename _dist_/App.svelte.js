/* src\App.svelte generated by Svelte v3.31.2 */
import {
	SvelteComponent,
	action_destroyer,
	append,
	attr,
	create_component,
	destroy_component,
	destroy_each,
	detach,
	element,
	init,
	insert,
	mount_component,
	noop,
	safe_not_equal,
	set_style,
	space,
	svg_element,
	text,
	transition_in,
	transition_out
} from "../_snowpack/pkg/svelte/internal.js";

import Tailwind from "./Tailwind.svelte.js";
import Router from "../_snowpack/pkg/svelte-spa-router.js";
import active from "../_snowpack/pkg/svelte-spa-router/active.js";
import { routes } from "./routes.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[1] = list[i];
	return child_ctx;
}

// (28:12) {#each components as component}
function create_each_block(ctx) {
	let a;
	let svg;
	let path;
	let t0;
	let t1_value = /*component*/ ctx[1].ComponentName + "";
	let t1;
	let t2;
	let a_href_value;
	let active_action;
	let mounted;
	let dispose;

	return {
		c() {
			a = element("a");
			svg = svg_element("svg");
			path = svg_element("path");
			t0 = space();
			t1 = text(t1_value);
			t2 = space();
			attr(path, "stroke-linecap", "round");
			attr(path, "stroke-linejoin", "round");
			attr(path, "stroke-width", "2");
			attr(path, "d", "M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-6l-2-2H5a2 2 0 00-2 2z");
			attr(svg, "class", "text-white 0 mr-3 h-6 w-6");
			attr(svg, "x-description", "Heroicon name: folder");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "fill", "none");
			attr(svg, "viewBox", "0 0 24 24");
			attr(svg, "stroke", "currentColor");
			attr(svg, "aria-hidden", "true");
			attr(a, "href", a_href_value = /*component*/ ctx[1].Route);
			attr(a, "class", "border-transparent text-white group flex items-center px-3 py-2 text-sm font-medium border-l-4");
		},
		m(target, anchor) {
			insert(target, a, anchor);
			append(a, svg);
			append(svg, path);
			append(a, t0);
			append(a, t1);
			append(a, t2);

			if (!mounted) {
				dispose = action_destroyer(active_action = active.call(null, a, {
					className: "bg-purple-400 border-purple-600"
				}));

				mounted = true;
			}
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(a);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let tailwind;
	let t0;
	let div6;
	let div5;
	let div3;
	let div2;
	let div0;
	let t2;
	let div1;
	let nav;
	let t3;
	let div4;
	let router;
	let current;
	tailwind = new Tailwind({});
	let each_value = /*components*/ ctx[0];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	router = new Router({ props: { routes } });

	return {
		c() {
			create_component(tailwind.$$.fragment);
			t0 = space();
			div6 = element("div");
			div5 = element("div");
			div3 = element("div");
			div2 = element("div");
			div0 = element("div");
			div0.innerHTML = `<h1 class="font-bold text-white text-center py-4">Svelte Typed Components</h1>`;
			t2 = space();
			div1 = element("div");
			nav = element("nav");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t3 = space();
			div4 = element("div");
			create_component(router.$$.fragment);
			attr(div0, "class", "bg-purple-700");
			attr(nav, "class", "flex-1 bg-white space-y-1");
			attr(nav, "aria-label", "Sidebar");
			attr(div1, "class", "flex-grow flex flex-col");
			attr(div2, "class", "flex flex-col flex-grow border-r border-gray-200 pb-4 bg-white overflow-y-auto");
			attr(div3, "class", "flex flex-col w-64");
			attr(div4, "class", "flex w-full justify-center items-center");
			attr(div5, "class", "h-screen flex bg-gray-100");
			set_style(div5, "min-height", "640px");
			attr(div6, "class", "");
		},
		m(target, anchor) {
			mount_component(tailwind, target, anchor);
			insert(target, t0, anchor);
			insert(target, div6, anchor);
			append(div6, div5);
			append(div5, div3);
			append(div3, div2);
			append(div2, div0);
			append(div2, t2);
			append(div2, div1);
			append(div1, nav);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(nav, null);
			}

			append(div5, t3);
			append(div5, div4);
			mount_component(router, div4, null);
			current = true;
		},
		p(ctx, [dirty]) {
			if (dirty & /*components*/ 1) {
				each_value = /*components*/ ctx[0];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(nav, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i(local) {
			if (current) return;
			transition_in(tailwind.$$.fragment, local);
			transition_in(router.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(tailwind.$$.fragment, local);
			transition_out(router.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(tailwind, detaching);
			if (detaching) detach(t0);
			if (detaching) detach(div6);
			destroy_each(each_blocks, detaching);
			destroy_component(router);
		}
	};
}

function instance($$self) {
	const components = [{ ComponentName: "Modal", Route: "/" }];
	return [components];
}

class App extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default App;