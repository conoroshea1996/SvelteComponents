/* src\Views\ModalView.svelte generated by Svelte v3.31.2 */
import {
	SvelteComponent,
	add_flush_callback,
	append,
	attr,
	bind,
	binding_callbacks,
	check_outros,
	create_component,
	destroy_component,
	detach,
	element,
	group_outros,
	init,
	insert,
	listen,
	mount_component,
	safe_not_equal,
	space,
	transition_in,
	transition_out
} from "../../_snowpack/pkg/svelte/internal.js";

import Modal from "../Components/Modal/Modal.svelte.js";

function create_if_block(ctx) {
	let modal;
	let updating_isOpen;
	let current;

	function modal_isOpen_binding(value) {
		/*modal_isOpen_binding*/ ctx[1].call(null, value);
	}

	let modal_props = {
		options: {
			closeOnBackgroundPress: true,
			closeOnEscapeKey: true
		},
		$$slots: {
			modal_content: [create_modal_content_slot]
		},
		$$scope: { ctx }
	};

	if (/*open*/ ctx[0] !== void 0) {
		modal_props.isOpen = /*open*/ ctx[0];
	}

	modal = new Modal({ props: modal_props });
	binding_callbacks.push(() => bind(modal, "isOpen", modal_isOpen_binding));

	return {
		c() {
			create_component(modal.$$.fragment);
		},
		m(target, anchor) {
			mount_component(modal, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const modal_changes = {};

			if (dirty & /*$$scope*/ 8) {
				modal_changes.$$scope = { dirty, ctx };
			}

			if (!updating_isOpen && dirty & /*open*/ 1) {
				updating_isOpen = true;
				modal_changes.isOpen = /*open*/ ctx[0];
				add_flush_callback(() => updating_isOpen = false);
			}

			modal.$set(modal_changes);
		},
		i(local) {
			if (current) return;
			transition_in(modal.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(modal.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(modal, detaching);
		}
	};
}

// (11:6) <div class="text-center" slot="modal_content">
function create_modal_content_slot(ctx) {
	let div;

	return {
		c() {
			div = element("div");

			div.innerHTML = `<h1 class="text-4xl">üéâ Svelte Modal üçæ</h1> 
        <p class="py-4">Lorem Ipsum is simply dummy text of the printing and typesetting
          industry. Lorem Ipsum has been the industry&#39;s standard dummy text ever
          since the 1500s, when an unknown printer took a galley of type and
          scrambled it to make a type specimen book. It has survived not only
          five centuries, but also the leap into electronic typesetting,
          remaining essentially unchanged. It was popularised in the 1960s with
          the release of Letraset sheets containing Lorem Ipsum passages, and
          more recently with desktop publishing software like Aldus PageMaker
          including versions of Lorem Ipsum.</p>`;

			attr(div, "class", "text-center");
			attr(div, "slot", "modal_content");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment(ctx) {
	let div;
	let t0;
	let button;
	let current;
	let mounted;
	let dispose;
	let if_block = /*open*/ ctx[0] && create_if_block(ctx);

	return {
		c() {
			div = element("div");
			if (if_block) if_block.c();
			t0 = space();
			button = element("button");
			button.textContent = "Open Modal";
			attr(button, "class", "w-full h-12 px-6 text-indigo-100 transition-colors duration-150 bg-indigo-700 rounded-lg focus:shadow-outline hover:bg-indigo-800");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if (if_block) if_block.m(div, null);
			append(div, t0);
			append(div, button);
			current = true;

			if (!mounted) {
				dispose = listen(button, "click", /*click_handler*/ ctx[2]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (/*open*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*open*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div, t0);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block) if_block.d();
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let open = false;

	function modal_isOpen_binding(value) {
		open = value;
		$$invalidate(0, open);
	}

	const click_handler = () => $$invalidate(0, open = true);
	return [open, modal_isOpen_binding, click_handler];
}

class ModalView extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default ModalView;